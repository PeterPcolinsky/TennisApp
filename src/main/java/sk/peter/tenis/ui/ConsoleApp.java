package sk.peter.tenis.ui;

import sk.peter.tenis.model.Player;
import sk.peter.tenis.service.StatsService;
import sk.peter.tenis.util.Printer;
import sk.peter.tenis.model.PlayerType;
import sk.peter.tenis.model.Match;

import java.util.ArrayList;
import java.util.List;
import java.time.LocalDate;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import java.util.Scanner;


public class ConsoleApp {

    // Cesty k CSV s√∫borom
    private static final Path DATA_DIR = Paths.get("data");
    private static final Path PLAYERS_CSV = DATA_DIR.resolve("players.csv");
    private static final Path MATCHES_CSV = DATA_DIR.resolve("matches.csv");

    private final List<Player> players = new ArrayList<>();
    private final List<Match> matches = new ArrayList<>();

    public void run() {
        Printer.println("üéæ Vitaj v TenisApp!");
        Printer.println("Cieƒæ: postupne vybudova≈• robustn√∫ appku (hr√°ƒçi, z√°pasy, ≈°tatistiky).");

        try {
            loadPlayersFromCsv();
            Printer.println("üîÑ Naƒç√≠tan√Ωch hr√°ƒçov: " + players.size());
        } catch (Exception e) {
            Printer.println("‚ö†Ô∏è Naƒç√≠tanie CSV zlyhalo: " + e.getMessage());
        }

        try {
            loadMatchesFromCsv();
            Printer.println("üîÑ Naƒç√≠tan√Ωch z√°pasov: " + matches.size());
        } catch (Exception e) {
            Printer.println("‚ö†Ô∏è Naƒç√≠tanie z√°pasov CSV zlyhalo: " + e.getMessage());
        }

        Scanner sc = new Scanner(System.in);
        int choice = -1;

        while (choice != 0) {
            Printer.println("");
            Printer.println("=== MENU ===");
            Printer.println("1) Vypoƒç√≠taj win-rate (v√Ωhernos≈•)");
            Printer.println("2) Zaregistruj hr√°ƒça");
            Printer.println("3) Zobraz v≈°etk√Ωch hr√°ƒçov");
            Printer.println("4) N√°js≈• hr√°ƒça podƒæa mena");
            Printer.println("5) Odstr√°≈à hr√°ƒça podƒæa mena");
            Printer.println("6) Pridaj z√°pas");
            Printer.println("7) Zobraz v≈°etky z√°pasy");
            Printer.println("8) ≈†tatistiky hr√°ƒça");
            Printer.println("0) Koniec");
            Printer.println("-----------------");

            choice = readIntInRange(sc, "Zadaj voƒæbu: ", 0, 99);

            switch (choice) {
                case 1 -> calcWinRateDemo(sc);
                case 2 -> registerPlayer(sc);
                case 3 -> listPlayers();
                case 4 -> findPlayerByName(sc);
                case 5 -> removePlayerByName(sc);
                case 6 -> addMatch(sc);
                case 7 -> listMatches();
                case 8 -> showPlayerStats(sc);
                case 0 -> Printer.println("Koniec. üëã");
                default -> Printer.println("Nezn√°ma voƒæba.");
            }
        }
    }

    // ============ VOƒΩBY MENU ============

    private void calcWinRateDemo(Scanner sc) {
        int wins = readIntInRange(sc, "Zadaj poƒçet v√Ωhier: ", 0, 1000);
        int losses = readIntInRange(sc, "Zadaj poƒçet prehier: ", 0, 1000);
        StatsService stats = new StatsService();
        double winRate = stats.calcWinRate(wins, losses);
        Printer.println("V√Ωhernos≈•: " + winRate + " %");
    }

    private void registerPlayer(Scanner sc) {
        String name = readName(sc, "Zadaj meno hr√°ƒça: ");                // VALID√ÅCIA MENA
        int age = readIntInRange(sc, "Zadaj vek hr√°ƒça (5‚Äì100): ", 5, 100);
        PlayerType type = null;
        while (type == null) {
            String input = readNonEmpty(sc, "Zadaj typ hr√°ƒça (Amat√©r/Profesion√°l): ");
            type = PlayerType.fromInput(input);
            if (type == null) {
                Printer.println("‚ö†Ô∏è Zadaj pros√≠m iba 'Amat√©r' alebo 'Profesion√°l'.");
            }
        }

        Player player = new Player(name, age, type);
        players.add(player);
        try {
            savePlayersToCsv();
            Printer.println("üíæ Ulo≈æen√© do " + PLAYERS_CSV.toString());
        } catch (Exception e) {
            Printer.println("‚ö†Ô∏è Nepodarilo sa ulo≈æi≈• CSV: " + e.getMessage());
        }

        Printer.println("‚úÖ Hr√°ƒç bol √∫spe≈°ne zaregistrovan√Ω:");
        Printer.println(player.toString());
    }

    private void listPlayers() {
        Printer.println("=== Zoznam hr√°ƒçov ===");
        if (players.isEmpty()) {
            Printer.println("Zatiaƒæ nem√°≈° ≈æiadnych hr√°ƒçov.");
            return;
        }
        int i = 1;
        for (Player p : players) {
            Printer.println(i + ") " + p.toString());
            i++;
        }
    }

    private void findPlayerByName(Scanner sc) {
        // ponech√°me mo≈ænos≈• ƒçiastoƒçn√©ho hƒæadania, ale iba p√≠smen√°/medzery
        String query = readLettersFragment(sc, "Zadaj meno (alebo ƒças≈• mena): ");
        String q = query.toLowerCase();

        boolean found = false;
        for (Player p : players) {
            if (p.getName().toLowerCase().contains(q)) {
                if (!found) {
                    Printer.println("=== N√°jden√≠ hr√°ƒçi ===");
                    found = true;
                }
                Printer.println(p.toString());
            }
        }
        if (!found) {
            Printer.println("Nena≈°iel sa ≈æiadny hr√°ƒç pre: " + query);
        }
    }

    private void removePlayerByName(Scanner sc) {
        String name = readName(sc, "Zadaj meno hr√°ƒça, ktor√©ho chce≈° odstr√°ni≈•: "); // VALID√ÅCIA MENA
        boolean removed = players.removeIf(p -> p.getName().equalsIgnoreCase(name));
        if (removed) {
            Printer.println("‚úÖ Hr√°ƒç " + name + " bol odstr√°nen√Ω zo zoznamu.");
        } else {
            Printer.println("‚ö†Ô∏è Hr√°ƒç s menom '" + name + "' sa nena≈°iel.");
        }
    }

    private void addMatch(Scanner sc) {
        if (players.size() < 2) {
            Printer.println("‚ö†Ô∏è Potrebuje≈° aspo≈à dvoch hr√°ƒçov, aby si mohol prida≈• z√°pas.");
            return;
        }

        String nameA = readName(sc, "Zadaj meno hr√°ƒça A: "); // VALID√ÅCIA MENA
        Player playerA = findPlayerByExactName(nameA);
        if (playerA == null) {
            Printer.println("‚ö†Ô∏è Hr√°ƒç '" + nameA + "' neexistuje. Najprv ho zaregistruj.");
            return;
        }

        String nameB = readName(sc, "Zadaj meno hr√°ƒça B: "); // VALID√ÅCIA MENA
        Player playerB = findPlayerByExactName(nameB);
        if (playerB == null) {
            Printer.println("‚ö†Ô∏è Hr√°ƒç '" + nameB + "' neexistuje. Najprv ho zaregistruj.");
            return;
        }

        if (playerA.getName().equalsIgnoreCase(playerB.getName())) {
            Printer.println("‚ö†Ô∏è Hr√°ƒç A a hr√°ƒç B nem√¥≈æu by≈• ten ist√Ω ƒçlovek.");
            return;
        }

        String score;
        while (true) {
            score = readNonEmpty(sc, "Zadaj v√Ωsledok (napr. 6:4, 3:6, 7:6): ");
            if (isValidScore(score)) break;
            Printer.println("Sk√∫s znova.");
        }

        LocalDate date;
        while (true) {
            String d = readNonEmpty(sc, "Zadaj d√°tum (YYYY-MM-DD): ");
            try {
                date = LocalDate.parse(d);
                break;
            } catch (Exception e) {
                Printer.println("‚ö†Ô∏è Neplatn√Ω form√°t d√°tumu. Sk√∫s znova (napr. 2025-10-12).");
            }
        }

        Match m = new Match(playerA, playerB, score, date);
        matches.add(m);

        try {
            saveMatchesToCsv();
            Printer.println("üíæ Ulo≈æen√© do " + MATCHES_CSV.toString());
        } catch (Exception e) {
            Printer.println("‚ö†Ô∏è Nepodarilo sa ulo≈æi≈• z√°pasy: " + e.getMessage());
        }

        Printer.println("‚úÖ Z√°pas pridan√Ω: " + m.toString());
    }

    private void listMatches() {
        Printer.println("=== Zoznam z√°pasov ===");
        if (matches.isEmpty()) {
            Printer.println("Zatiaƒæ nem√°≈° ≈æiadne z√°pasy.");
            return;
        }
        int i = 1;
        for (Match m : matches) {
            Printer.println(i + ") " + m.toString());
            i++;
        }
    }

    private void showPlayerStats(Scanner sc) {
        String name = readName(sc, "Meno hr√°ƒça pre ≈°tatistiky: "); // VALID√ÅCIA MENA
        Player player = findPlayerByExactName(name);
        if (player == null) {
            Printer.println("‚ö†Ô∏è Hr√°ƒç '" + name + "' neexistuje.");
            return;
        }

        int played = 0;
        int wins = 0;
        int losses = 0;
        int unfinished = 0;

        for (Match m : matches) {
            if (!participated(player, m)) continue;
            played++;

            Integer res = matchResultFor(player, m); // 1=win, 0=loss, null=unfinished
            if (res == null) {
                unfinished++;
            } else if (res == 1) {
                wins++;
            } else {
                losses++;
            }
        }

        int finished = wins + losses;
        double winRate = (finished == 0) ? 0.0 : (wins * 100.0) / finished;

        Printer.println("=== ≈†tatistiky: " + player.getName() + " ===");
        Printer.println("Z√°pasy spolu: " + played + " (ukonƒçen√©: " + finished + ", nedokonƒçen√©: " + unfinished + ")");
        Printer.println("V√Ωhry: " + wins + " | Prehry: " + losses);
        Printer.println("Win-rate (len ukonƒçen√©): " + String.format("%.1f", winRate) + " %");
    }

    // ============ POMOCN√â MET√ìDY ============

    // bezpeƒçn√© cel√© ƒç√≠slo v rozsahu
    private int readIntInRange(Scanner sc, String prompt, int min, int max) {
        while (true) {
            Printer.println(prompt);
            String line = sc.nextLine().trim();
            try {
                int value = Integer.parseInt(line);
                if (value < min || value > max) {
                    Printer.println("Hodnota mus√≠ by≈• v rozsahu " + min + " a≈æ " + max + ".");
                    continue;
                }
                return value;
            } catch (NumberFormatException e) {
                Printer.println("Zadaj pros√≠m cel√© ƒç√≠slo (napr. 7).");
            }
        }
    }

    // nepr√°zdny re≈•azec (pou≈æ√≠vame pri pol√≠ƒçkach, kde netreba regex)
    private String readNonEmpty(Scanner sc, String prompt) {
        while (true) {
            Printer.println(prompt);
            String s = sc.nextLine().trim();
            if (!s.isEmpty()) return s;
            Printer.println("Toto pole nem√¥≈æe by≈• pr√°zdne.");
        }
    }

    // meno: len p√≠smen√° (aj diakritika) a medzery, dƒ∫≈æka 2‚Äì40
    private String readName(Scanner sc, String prompt) {
        while (true) {
            Printer.println(prompt);
            String s = sc.nextLine().trim();
            s = s.replaceAll("\\s+", " ");
            if (s.matches("[\\p{L} ]{2,40}")) {
                return s;
            }
            Printer.println("‚ö†Ô∏è Meno m√¥≈æe obsahova≈• iba p√≠smen√° a medzery (2‚Äì40 znakov). Sk√∫s znova.");
        }
    }

    // fragment mena pre vyhƒæad√°vanie: p√≠smen√°/medzery, dƒ∫≈æka 1‚Äì40
    private String readLettersFragment(Scanner sc, String prompt) {
        while (true) {
            Printer.println(prompt);
            String s = sc.nextLine().trim();
            s = s.replaceAll("\\s+", " ");
            if (s.matches("[\\p{L} ]{1,40}")) {
                return s;
            }
            Printer.println("‚ö†Ô∏è Pou≈æi iba p√≠smen√° a medzery (1‚Äì40 znakov).");
        }
    }

    private Player findPlayerByExactName(String name) {
        for (Player p : players) {
            if (p.getName().equalsIgnoreCase(name)) return p;
        }
        return null;
    }

    private boolean participated(Player p, Match m) {
        return m.getPlayerA().getName().equalsIgnoreCase(p.getName())
                || m.getPlayerB().getName().equalsIgnoreCase(p.getName());
    }

    // 1 = win, 0 = loss, null = unfinished (rovnos≈• setov)
    private Integer matchResultFor(Player player, Match m) {
        boolean isA = m.getPlayerA().getName().equalsIgnoreCase(player.getName());
        int setsA = 0;
        int setsB = 0;

        String[] sets = m.getScore().split(",");
        for (String s : sets) {
            String[] parts = s.trim().split(":");
            int a = Integer.parseInt(parts[0]);
            int b = Integer.parseInt(parts[1]);
            if (a > b) setsA++;
            else if (b > a) setsB++;
        }

        if (setsA == setsB) return null;
        boolean aWon = (setsA > setsB);
        boolean playerWon = (isA == aWon);
        return playerWon ? 1 : 0;
    }

    // valid√°cia sk√≥re setov: spr√°vny form√°t a povolen√© v√Ωsledky
    private boolean isValidScore(String score) {
        String[] sets = score.split(",");

        for (String set : sets) {
            set = set.trim();
            if (!set.matches("\\d:\\d")) {
                Printer.println("‚ö†Ô∏è Nespr√°vny form√°t setu: " + set + " (pou≈æi napr. 6:4)");
                return false;
            }

            String[] parts = set.split(":");
            int gamesA = Integer.parseInt(parts[0]);
            int gamesB = Integer.parseInt(parts[1]);

            boolean valid =
                    (gamesA == 6 && gamesB <= 4) ||
                            (gamesB == 6 && gamesA <= 4) ||
                            (gamesA == 7 && (gamesB == 5 || gamesB == 6)) ||
                            (gamesB == 7 && (gamesA == 5 || gamesA == 6));

            if (!valid) {
                Printer.println("‚ö†Ô∏è Nepovolen√Ω v√Ωsledok setu: " + set);
                return false;
            }
        }
        return true;
    }

    private void ensureDataDir() throws Exception {
        if (!Files.exists(DATA_DIR)) {
            Files.createDirectories(DATA_DIR);
        }
    }

    private void savePlayersToCsv() throws Exception {
        ensureDataDir();
        // prep√≠≈°eme cel√Ω s√∫bor v≈ædy nanovo ‚Äì jednoduch√© a bezpeƒçn√©
        try (var writer = Files.newBufferedWriter(PLAYERS_CSV, StandardCharsets.UTF_8)) {
            // hlaviƒçka (voliteƒæn√©)
            writer.write("Meno;Vek;Typ");
            writer.newLine();

            for (Player p : players) {
                // meno ani typ neobsahuj√∫ ; (validujeme len p√≠smen√°/medzery)
                writer.write(p.getName() + ";" + p.getAge() + ";" + p.getType().getDisplayName());
                writer.newLine();
            }
        }
    }

    private void saveMatchesToCsv() throws Exception {
        ensureDataDir();
        try (var writer = Files.newBufferedWriter(MATCHES_CSV, StandardCharsets.UTF_8)) {
            writer.write("HracA;HracB;Vysledok;Datum");
            writer.newLine();

            for (Match m : matches) {
                writer.write(m.getPlayerA().getName() + ";" +
                        m.getPlayerB().getName() + ";" +
                        m.getScore() + ";" +
                        m.getDate());
                writer.newLine();
            }
        }
    }

    private void loadPlayersFromCsv() throws Exception {
        ensureDataDir();

        // Ak CSV e≈°te neexistuje, vytvor ho s hlaviƒçkou a skonƒçi
        if (!Files.exists(PLAYERS_CSV)) {
            try (var w = Files.newBufferedWriter(PLAYERS_CSV, StandardCharsets.UTF_8)) {
                w.write("Meno;Vek;Typ");
                w.newLine();
            }
            return;
        }

        try (var reader = Files.newBufferedReader(PLAYERS_CSV, StandardCharsets.UTF_8)) {
            String line;
            boolean first = true;

            while ((line = reader.readLine()) != null) {
                if (line.isBlank()) continue;

                // preskoƒç hlaviƒçku
                if (first) {
                    first = false;
                    if (line.toLowerCase().startsWith("meno;")) continue;
                }

                String[] parts = line.split(";", -1);
                if (parts.length < 3) continue;

                String name = parts[0].trim();
                String ageStr = parts[1].trim();
                String typeStr = parts[2].trim();

                int age;
                try {
                    age = Integer.parseInt(ageStr);
                } catch (NumberFormatException e) {
                    // neplatn√Ω vek ‚Äì preskoƒç riadok
                    continue;
                }

                // Podpor√≠ "Amat√©r", "Amater", "Profesion√°l", "Profesional"
                var type = sk.peter.tenis.model.PlayerType.fromInput(typeStr);
                if (type == null) {
                    // fallback (napr. ak by niekto ruƒçne prep√≠sal CSV)
                    type = sk.peter.tenis.model.PlayerType.AMATER;
                }

                // vyhne sa duplicit√°m podƒæa mena
                if (findPlayerByExactName(name) == null) {
                    players.add(new sk.peter.tenis.model.Player(name, age, type));
                }
            }
        }
    }

    private void loadMatchesFromCsv() throws Exception {
        ensureDataDir();

        // Ak CSV neexistuje, vytvor s hlaviƒçkou a skonƒçi
        if (!Files.exists(MATCHES_CSV)) {
            try (var w = Files.newBufferedWriter(MATCHES_CSV, StandardCharsets.UTF_8)) {
                w.write("HracA;HracB;Vysledok;Datum");
                w.newLine();
            }
            return;
        }

        try (var reader = Files.newBufferedReader(MATCHES_CSV, StandardCharsets.UTF_8)) {
            String line;
            boolean first = true;

            while ((line = reader.readLine()) != null) {
                if (line.isBlank()) continue;

                // preskoƒç hlaviƒçku
                if (first) {
                    first = false;
                    if (line.toLowerCase().startsWith("hraca;")) continue;
                }

                String[] parts = line.split(";", -1);
                if (parts.length < 4) continue;

                String nameA = parts[0].trim();
                String nameB = parts[1].trim();
                String score = parts[2].trim();
                String dateStr = parts[3].trim();

                // n√°jdi hr√°ƒçov (musia existova≈• ‚Äì hr√°ƒçov naƒç√≠tavame sk√¥r)
                Player a = findPlayerByExactName(nameA);
                Player b = findPlayerByExactName(nameB);
                if (a == null || b == null) {
                    Printer.println("‚ö†Ô∏è Riadok preskoƒçen√Ω ‚Äì hr√°ƒç A/B sa nena≈°iel: " + nameA + " / " + nameB);
                    continue;
                }

                // validuj sk√≥re
                if (!isValidScore(score)) {
                    Printer.println("‚ö†Ô∏è Riadok preskoƒçen√Ω ‚Äì neplatn√© sk√≥re: " + score);
                    continue;
                }

                // parsuj d√°tum
                LocalDate date;
                try {
                    date = LocalDate.parse(dateStr);
                } catch (Exception e) {
                    Printer.println("‚ö†Ô∏è Riadok preskoƒçen√Ω ‚Äì neplatn√Ω d√°tum: " + dateStr);
                    continue;
                }

                // zabr√°≈à duplicit√°m (rovnak√≠ hr√°ƒçi + d√°tum + sk√≥re; porovn√°me aj prehoden√© poradie)
                if (matchExists(a, b, score, date)) {
                    continue;
                }

                matches.add(new Match(a, b, score, date));
            }
        }
    }

    private boolean matchExists(Player a, Player b, String score, LocalDate date) {
        for (Match m : matches) {
            boolean sameOrder =
                    m.getPlayerA().getName().equalsIgnoreCase(a.getName()) &&
                            m.getPlayerB().getName().equalsIgnoreCase(b.getName());

            boolean swappedOrder =
                    m.getPlayerA().getName().equalsIgnoreCase(b.getName()) &&
                            m.getPlayerB().getName().equalsIgnoreCase(a.getName());

            if ((sameOrder || swappedOrder)
                    && m.getScore().equalsIgnoreCase(score)
                    && m.getDate().equals(date)) {
                return true;
            }
        }
        return false;
    }

}

